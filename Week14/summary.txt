1. 前端架构最热门的两个话题 组件化和架构模式
2. 架构模式最重要
组件化
1. 组件化就是从最基本的如何扩展HTML标签引申出来的前端架构体系.它的主要目标就是复用.
架构模式就是大家特别熟悉的MVC MVVM.
它主要关系前端和数据逻辑层是如何交互的.
所以,前端部分组件化内容是最重要的. 实操Winter认为组件化要比MVC的架构模式更重要一些.组件化决定了前端团队的复用率.

组件的概念和基本组成.
对象: `properties Methods Inherit
组件: properties Methods Inherit Attribute `Config & state ` Event Lifecyle Children

一般我们认为组件时和ui强相关的东西, 某种意义上我们可以认为它是一种特殊的模块或者对象.它即是模块也是对象.它的特点就是它用树形结构进行整合.并且它又一定的模块化配置的能力.
没有children 就没有树形结构,描述界面的能力就会差很多

Component 图理解
attribute: Component user's(也就是程序员) make up code 用make up language 
properties: 出了通过make up 也可以通过设置property 影响组件
attribute 与 property 是否统一,完全取决于顶层的前端架构设计者.

property 和 method 是使用组件的程序员向开发组件的程序员提供信息.
箭头表示信息流向!!!


attribute && Property 
attribute 描述性:一个人很帅,皮肤很黄
property 从属关系: object A is a property of object B 大概率是子对象从属于父对象. 
HTML 就是一个 property 和 attribue 不等效的设计.

Attribute VS Property
HTML 中 attribute 叫做 class property 叫classname 

用 getattribute setAttribute 也可以设置属性;但是如果用style property就可以得到一个key value结构.更好用一点

href 属性 attribute 和 property 差不多
input value

Lifecyle
一个组件创建出来,放到树上叫做mount(react中的概念)

[为组件添加JSX语法]
首先建立能使用 markup 的环境: 
两种方法:1. 一种是和react 一样的基于 JSX来建立; 2. 第二种是基于Vue 的标记语言的parser 来建立
..JXX
1. 环境搭建 首先创建一个新的文件夹并且进入;然后进入npm 环境;然后安装webpack(两种方法: 可以通过npx 直接使用webpack 也可以全局安装webpack and webpack-cli并且使用)
cd jsx
npm init
npm install -g webpack webpack-cli
webpack --version
安装webpack-dev-server 包可以让调试更舒服一点.npm install webpack-dev-server --save-dev
然后 webpack-dev-server 命令可以直接启动起来;这个包依赖 webpack-cli      所以,npm install --save-dev webpack-cli

jsx 是babel 的一个插件;所以babel 也需要安装babel; babel-loader; babel-plugin
安装到本地目录
npm install --save-dev webpack babel-loader
此时 .jsx/package.json 出现babelloader 和webpack
接下来创建webpage config

webconfig 是一个node.js 的模块 用module.exports 来配置设置. 首先配置一个入口 main.js;
然后执行webpack 命令,此时 出现一个jsx/dist 目录; 里面是打包好的 main.js

接下来安装babel:npm install --ave-dev @babel/core @babel/preset-env
在webpack 中加入module 模块; 然后先webpack 打包,然后再查看 dist/main.js 发现已经用babel 打包好了.

在webapckconfig 中新加一个mode 配置,为了开发方便. 开发之后要改成 production 发布模式;webpack 打包一下,发现dist/main.js  出现了很大变化
然后代码被放到eval 里面 这样调试的时候就可以当作一个单独的文件来进行调试了

此时还不支持 jsx 所以,要配置 jsx/package.json
首先要安装这个包: npm install --save-dev @babel/plugin-transform-react-jsx
然后要配置到webpack.config.js 中去;双引号表示对json 尊重
main.js 中添加 let a = <dev/>   jsx 代码,可以被正确webpack(命令) 打包执行 
它被 eval 翻译成React.createElement


[jsx 理解]
jsx 是一种单纯的语法上的快捷方式.
在webpack 中可以加配置,让它和react 没有任何关系. 
plugins: [["@babel/plugin-transform-react-jsx",{pragma:"..."}]] pragma 中写什么就会变成什么. 重新webpack 就可以在 eval中看到
然后在 dist 中创建 main.htm 去运行它; 报错 createElement is not defined; 所以在 main中定义一个 createElement 函数; 执行webpack 然后就不报错了.
接下来修改main.js 的代码；加入 span；webpack； 查看 eval； 发现递归调用 createElement 在main.js 内部创建 span
注意html 重至少要有一个body 标签才可以。不然dom 树上是没有可以挂载的东西的。
let a = <div id = "a">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
</div>
去浏览器查看源代码可知：
var a = createElement("div", {
  id: "a"
}, createElement("span", null), createElement("span", null), createElement("span", null), createElement("span", null));
document.body.appendChild(a);

然后换成文本节点试试
let a = <div id = "a">
Hello World
</div>

document.body.appendChild(a);
main.html 的source 查看源代码
var a = createElement("div", {
  id: "a"
}, "Hello World");
document.body.appendChild(a);

可以看到children 会变成一个字符串; 所以 生计main.js;检查children 是否是string
function createElement(type,attributes,...children){ 
    let element = document.createElement(type);
    for (let name in attributes){
        element.setAttribute(name,attributes[name]);
    }
    for (let child of children){
        if (typeof child === "string")
        {
            child = document.createTextNode(child);
        }
        element.appendchild(child);
    }
    return element;
}

然后如果标签是一个 html 中没有标签 比如 <Div> 那么默认传入的 type 就从 "div" 一个string 变成了一个class Div. 所以，可以先定义Div 然后再去使用它
Div 此时并不能像 普通的html 标签那样操作。在最新版的DOM 中可以注册一下Div的名称和类型，然后就可以操纵了。现行比较安全的浏览器版本不建议这么作。
所以，推荐方法是写一个接口，然后反向操作。给 class 的 object 定义一个方法（随便叫什么名字，比如叫monuntTo(document.body)）将本节点挂在父节点上 ;然后再在class 中实现mountTo 方法就可以了
当然作为一个class首先构造函数一定要有
class 如果想要正常工作，setAttribute 和 appendChilde 这两个方法也要实现。不然无法 添加节点

这里有一个问题就是正常div 是没有mountTo（或者叫其它名字也可以） 的方法的。所以要写一个wrapper
当然一般不会写Div这么无聊的class， 可能写一个Carousel 之类的东西

--------------------------------------------------------------------------------------------------------------------------------------
[接下来根据jsx 作一套组件系统.] 之前作的只是对DOM进行一些简单的封装
猫咪图片放到文件夹pictures 里面了.
图片源地址是
https://static001.geekbang.org/resource/image/bb/21/bb38fb7c1073eaee1755f81131f11d21.jpg
https://static001.geekbang.org/resource/image/1b/21/1b809d9a2bdf3ecc481322d7c9223c21.jpg
https://static001.geekbang.org/resource/image/b6/4f/b6d65b2f12646a9fd6b8cb2b020d754f.jpg
https://static001.geekbang.org/resource/image/73/e4/730ea9c393def7975deceb48b3eb6fe4.jpg


做一个carousel 组件 轮播图
新建 Carousel class. textWrapper ElementWrapper 以及createElement 放到 另一个文件里面去 叫做framework.js;做好export; 把Wrapper 公共部分提取出来叫做Component(class Component)
Component 类的构造函数 this.root = this.render(); 这样在组件里面写一个render函数就有它自己的结构了. 
Wrapper 类要继承component 就可以了.然后考虑carousel类;当然在main.js 使用 要import 进来
启动webpack-server
注意:
1.如果你电脑全局没有装 webpack-dev-server
你直接使用 webpack-dev-server 命令会报错 command not found: webpack-dev-server
需要使用 node_modules/.bin/webpack-dev-server 启动
或者
配置在package.json 例如:
"scripts": {
"start": "webpack-dev-server"
}
使用 npm start 或 yarn start 启动

2.webpack-cli是4.* 版本 会和 webpack-dev-server 3.* 版本 不兼容
启动 webpack-dev-server 会报错：Cannot find module 'webpack-cli/bin/config-yargs'
可以换成启动 webpack serve 命令; 然后modify就不需要重新编译了.新生成的html 文件通过localhost:8080 启动


实现Carousel 首先 将d 也就是地址传入. Carousel 的class 将图片取出来
--------------------------------------------
然后,渲染这些图片.加上交互.
因为img 是可拖拽的东西,所以这里不建议使用img 来解决这个问题.所以用div 或者 backgound-img 莱解决这个问题会好很多.
然后要给图片加一些CSS,所以在 root 的classList里面加入Carousel就可以了;CSS 要加在main.html里面;调整猫的大小,以及让猫横排;

[然后添加时间控制CSS animation]
一个小技巧,++如果取余就循环了.16ms 是浏览器一帧的时间
解决,最后一张图片没有轮播效果的问题.
[然后是鼠标拖动轮播的问题]
// 一般处理拖拽就使用这种代码结构;永远是三个一组; document 监听又好处
打印clientX 和 clientY 看一下
拖拽之前 transition 要关掉
------------------------------拖拽实现真正的循环轮播.------------------------------------------------
多个方向的自动循环














