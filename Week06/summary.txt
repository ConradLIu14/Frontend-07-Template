语言按照语法分类: 1.形式语言:形法定义
                2. 非形式语言：中文，英文，没有严格固定的形式

形式语言（乔姆斯基谱系）：
0.无限制文法 
1.上下文相关文法
2.上下文无关文法
3.正则文法

BNF 产生式的一种表示方法

用尖括号括起来的名称表示语法结构名

语法结构分为基础结构和需要用其他语法结构定义的复合结构
基础结构称为终结符
复合结构称为非终结符

引号和中间字符来表示终结符（字符串）

*表示可以重复多次
|表示或
+表示至少一次

产生式（BNF）
1+2*3 
终结符:Number;+;-;*;/;
非终结符：MultiplicativeExpression;AddtiveExpression;

通过产生式理解乔姆斯基谱系
0型 无限制文法
?:==?
1型 上下文相关文法
?<A>?::=?<B>?
2型 上下文无关文法
<A>::=?
3型 正则文法
<A>::=<A>?
<A>::=?<A> X

其他产生式
EBNF ABNF 

现代语言特例
C++ *表示指针或者乘号
VB < 表示小于或者XML直接量
Python 行首的Tab 空格
Javascript 里面/可能是除号，可能是正则表达式开头

语言分类
形式语言-用途
·编程描述语言：JSON；HTML；XAML；SQL；CSS；
·编程语言：c;C++;Java;Javascript;Pyton;C#

形式语言-表达方式
·声明式语言：JSON；HTML；XAML；CSS；Lisp；
·命令式语言：C；C++；Java；C#；


图灵完备性
·命令式--图灵机
    ·goto
    ·if 和 while
·声明式--lambda
    ·递归

动态与静态
·动态
    ·在用户的设备，在线服务器上
    ·在产品实际运行时
    ·Runtime
·静态
    ·在程序员的设备上
    ·产品开发时
    ·Compiletime

类型系统
    ·动态类型系统与静态类型系统//C++编译的时候类型已经被丢掉了静态；动态js 编译的时候变量依然可以取出来；java反射机制可以编译的时候获取；
    ·强类型系统与弱类型系统
        ·String+Number
        ·String==Boolean
    ·复合类型
        ·结构体
        ·函数签名
    ·子类型
    ·泛型
        ·逆变，协变


Atom
Grammer                     Runtime
·Literal                    ·Types
·Variable                   ·Execution Context
·Keywords
·whitespace
·Line Terminate

Types
·Number
    ·IEEE754 Double Float
        ·Sign(1)
        ·Exponent(11)()
        ·Fraction(52)
        Value = (-1)^sign*2^Exponent*Fraction
        所以 Exponent 增加一位，整个数值增大2倍，小数点则向右移1位；每减1，整个数值减小2倍，小数点则向左移动1位。
    ·Number Grammer
        ·DecimalLiteral
            ·0
            ·0.
            ·.2              0.toString() 这个语法冲突，不可以；
            ·1e3             0 .toString() 这里是语法冲突，要加空格来写 0..toString()也可以

        ·BinaryIntegerLiteral
            ·0b111
        ·OctalIntegerLiteral
            ·0o10
        ·HexIntegerLiteral
            ·0xFF
·String
·Boolean
·Object
·Null
·Undefined
·Symbol
·(BigInt)

Appendix(移码（增码），补码，反码)
反码：反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反。（1负0正）。

/*在介绍补码概念之前，先介绍一下“模”的概念：“模”是指一个计量系统的计数范围，如过去计量粮食用的斗、时钟等。计算机也可以看成一个计量机器，
因为计算机的字长是定长的，即存储和处理的位数是有限的，因此它也有一个计量范围，即都存在一个“模”。如：时钟的计量范围是0~11，模=12。
表示n位的计算机计量范围是，模=．“模”实质上是计量器产生“溢出”的量，它的值在计量器上表示不出来，计量器上只能表示出模的余数。任何有模的计量器，均可化减法为加法运算 [3] 。
就是取反后加1。*/

补码：正整数的补码是其二进制表示，与原码相同；求负整数的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1
（比反码多了个+1）
数0的补码表示是唯一的 [3]  。
[+0]补=[+0]反=[+0]原=00000000
[ -0]补=11111111+1=00000000